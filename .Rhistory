melt(Sfun,id.vars=c("x","var"))->SS
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
melt(Sfun,id.vars=c("x","var"))->SS
plot(Sfun, which = c("L","S","E","I","R","N"), xlab ="time", lwd = 2)
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")
SEIRR<-function(pars){
pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2])  - pars[3]*S
dE <- (S*I*pars[2]) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7)) #Picking up every 7th element
Dat <- cbind(new[ii,], L=report(out,gamma))#[-(1:1456),] # Excluding burn in period
return(Dat)
}
SEIRRcost<- function(pars){
out<-SEIRR(pars)
cost <- modCost(model = out, obs = DataT)
return(cost)
}
Sfun<-sensFun(func = SEIRR, parms = pars, senspar = c(1:6))
summary(Sfun)
melt(Sfun,id.vars=c("x","var"))->SS
plot(Sfun, which = c("L","S","E","I","R","N"), xlab ="time", lwd = 2)
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+
geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")+ theme_bw()
library(deSolve)
require(pracma)
require(FME)
require(stats4)
require(bbmle)
require(ggplot2)
library(deSolve)
require(pracma)
require(FME)
require(stats4)
require(bbmle)
require(ggplot2)
library(reshape2)
Data = read.table(file.choose())
Data = Data[1:469,2]/5.1e+07
summary(Data)
head(Data)
report=function(out, gamma = gamma){
I= out[,4]
C=c()
for (i in 0:(468+1456) ){
C[i+1]=0
for (j in 1:7) {
x=(7*i)+j
C[i+1]=C[i+1] + gamma*I[x]*(1/(365.25*7))
}
}
return(C)
}
gamma = 365/14
pars <- c(mub=1/60, beta= 600, mud = 1/60, lambda = 365/8, gamma = 365/7,
va = 0, s = 1/23, e = 0, i = 1e-4, r = 1-1/23-1e-4 , beta2 = .2, phi = .5)
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))[-(1:1456),]
return(Dat)
}
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
plot(out1[,4], type="l")
View(out1)
ggplot(out1, mapping=aes(x=time, y=I ) +
geom_line() + ggtitle("Forced SEIRR Model") +
xlab("time") + ylab("I(t)") + theme_bw() +
facet_wrap()
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))[-(1:1456)]
DataT <- cbind(time = timesD[ii,2], L= Data) # Appending time and Data
# Model Cost
SEIRRcost<- function(pars){
out<-SEIRR(pars)
cost <- modCost(model = out, obs = DataT)
return(cost)
}
fit = mle2(log_likelihood, start = list(mub=1/60, beta= 600, mud = 1/60, lambda = 365/8, gamma = 365/14,
va = 0, s = 1/23, e = 0, i = 1e-4, r = 1-1/23-1e-4 , beta2 = .2, phi = .5,  mu = 0, sigma = 7.541453e-06)
, fixed = list(gamma = 365/14, mu = 0, va = 0), lower = rep(0,11),
upper = list(mub=1,beta=1e+3,mud=1,lambda=100,s=1,e=1,i=1,r=1,beta2=1,phi=1,sigma=7.541453e-06),method = "L-BFGS-B" )
#Parameter Estimation
Fit <- modFit(f = SEIRRcost, p = pars, lower = rep(0,12), upper = c(1,1e+3,1,100,100,0,1,1,1,1,1,1)  )
# Local Sensitivities
Sfun<-sensFun(func = SEIRR, parms = pars, senspar = c(1:6,11,12))
summary(Sfun)
plot(Sfun, which = c("L","S","E","I","R","N"), xlab ="time", lwd = 2)
SS = melt(Sfun, id.vars = c("x","var"))
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")
# Identifiability of parameters
ident <- collin(Sfun)
ident
plot(ident, log = "y")
## 20 = magical number above which there are identifiability problems
abline(h = 20, col = "red")
#Manual Iteration for parameter estimates
pars = Fit$par
gamma = pars[5]
Fit <- modFit(f = SEIRRcost, p = pars, lower = rep(0,12), upper = c(rep(Inf,10),1,1) )
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))[-(1:1456),]
return(Dat)
}
ggplot(out1, mapping=aes(x=time, y=I )) +
geom_line() + ggtitle("Forced SEIRR Model") +
xlab("time") + ylab("I(t)") + theme_bw() +
facet_wrap()
ggplot(out1, mapping=aes(x=time, y=I )) +
geom_line() + ggtitle("Forced SEIRR Model") +
xlab("time") + ylab("I(t)") + theme_bw()
ggplot(out1, mapping=aes(x=time, y=I )) +
geom_line() + ggtitle("Forced SEIRR Model") +
xlab("time") + ylab("I(t)") + theme_bw()
ggplot(out1, mapping=aes(x=time, y=I)) +
geom_line() + ggtitle("Forced SEIRR Model") +
xlab("time") + ylab("I(t)") + theme_bw()
ggplot(out1, mapping=aes(x=time, y=I)) +
geom_line() + ggtitle("title") +
xlab("x") + ylab("y") + theme_bw()
ggplot(data=out1 ,mapping=aes(x=time,y=I ))+geom_line()+ylab("I(t)") +xlab("t")+ggtitle("Trajectory")
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
library(deSolve)
require(pracma)
require(FME)
require(stats4)
require(bbmle)
require(ggplot2)
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
ggplot(out1, mapping=aes(x=time, y=I)) +
geom_line() + ggtitle("Forced SEIRR Model") +
xlab("time") + ylab("I(t)") + theme_bw()
ggplot(data=out1 ,mapping=aes(x=time,y=I ))+geom_line()+ylab("I(t)") +xlab("t")+ggtitle("Trajectory")
ggplot(data=out1 ,aes(x=time,y=I ))+geom_line()+ylab("I(t)") +xlab("t")+ggtitle("Trajectory")
ggplot(data=out1 ,aes(x=time,y=I ))
+geom_line()
ggplot(data=out1 ,aes(x=time,y=I ))+ geom_line()
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))[-(1:1456)]
DataT <- cbind(time = timesD[ii,2], L= Data) # Appending time and Data
SEIRRcost<- function(pars){
out<-SEIRR(pars)
cost <- modCost(model = out, obs = DataT)
return(cost)
}
ggplot(data = out1, mapping = aes(x=time, y=I)) + geom_line()
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+
geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")+ theme_bw()
library(deSolve)
require(pracma)
require(FME)
require(stats4)
require(bbmle)
require(ggplot2)
Data = read.table(file.choose())
Data = Data[1:469,2]/5.1e+07
summary(Data)
head(Data)
gamma = 365/14
pars <- c(mub=1/60, beta= 600, mud = 1/60, lambda = 365/8, gamma = 365/7,
va = 0, s = 1/23, e = 0, i = 1e-4, r = 1-1/23-1e-4 , beta2 = .2, phi = .5)
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))[-(1:1456),]
return(Dat)
}
out1 <- SEIRR(pars)
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))#[-(1:1456),]
return(Dat)
}
out1 <- SEIRR(pars)
report=function(out, gamma = gamma){
I= out[,4]
C=c()
for (i in 0:(468+1456) ){
C[i+1]=0
for (j in 1:7) {
x=(7*i)+j
C[i+1]=C[i+1] + gamma*I[x]*(1/(365.25*7))
}
}
return(C)
}
"MODEL"
pars <- c(mub=1.2/60, beta= 600, mud = 1/60, lambda = 365/10, gamma = 365/7,
va = 0, s = 1/23, e = 0, i = 1e-4, r = 1-1/23-1e-4 , beta2 = .2, phi = .5)
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))#[-(1:1456),]
return(Dat)
}
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
plot(out1[,4], type="l")
pars <- c(mub=1/60, beta= 600, mud = 1/60, lambda = 365/8, gamma = 365/7,
va = 0, s = 1/23, e = 0, i = 1e-4, r = 1-1/23-1e-4 , beta2 = .3, phi = .5)
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))#[-(1:1456),]
return(Dat)
}
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
plot(out1[,4], type="l")
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))[-(1:1000),]
return(Dat)
}
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
plot(out1[,4], type="l")
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))[-(1:1200),]
return(Dat)
}
SEIRR<-function(pars){
#parms[names(P)] <- P
#pars = as.vector(pars)
#Initial Conditions
s = as.vector(pars[7])
e = as.vector(pars[8])
i = as.vector(pars[9])
r = as.vector(pars[10])
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <-  pars[1]*(1-pars[6]) -  (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12]))))  - pars[3]*S
dE <- (S*I*pars[2]*(1 + pars[11]*cos(2*pi*(t - pars[12])))) - (pars[4]+pars[3])*E
dI <-  pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + (pars[1]*pars[6]) - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
return(list(c(dS, dE, dI, dR, dN)))
})
}
times <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
new=as.data.frame(out)
time <- seq(0, 37, by = 37/((469+1456)*7) )[1:((469+1456)*7)]
timesD<- cbind(t=0:13474,time)
ii <- which (timesD[,1] %in% seq(0, 13474, by = 7))
Dat <- cbind(new[ii,], L=report(out,gamma))[-(1:1200),]
return(Dat)
}
out1 <- SEIRR(pars)
out1 <- data.frame(out1)
plot(out1[,4], type="l")
plot(out1[,4], type="l")
ggplot(data=out ,mapping=aes(x=time,y=I ))+geom_line()+ylab("I(t)") +xlab("t")+ggtitle("Trajectory")
ggplot(data=out1 ,mapping=aes(x=time,y=I ))+geom_line()+ylab("I(t)") +xlab("t")+ggtitle("Trajectory")
ggplot(data=out1 ,mapping=aes(x=time,y=I ))+geom_line()+ylab("I(t)") +xlab("t")+ggtitle("Forced SEIR Model")+ theme_bw()
ggplot(out1, mapping=aes(x=time, y=I)) +
geom_line() + ggtitle("title") +
xlab("x") + ylab("y") + theme_bw()
Sfun<-sensFun(func = SEIRR, parms = pars, senspar = c(1:6,11,12))
summary(Sfun)
plot(Sfun, which = c("L","S","E","I","R","N"), xlab ="time", lwd = 2)
SS = melt(Sfun, id.vars = c("x","var"))
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")
require(reshape2)
summary(Sfun)
plot(Sfun, which = c("L","S","E","I","R","N"), xlab ="time", lwd = 2)
SS = melt(Sfun, id.vars = c("x","var"))
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+geom_line()+facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ")
ggplot(data=SS,mapping=aes(x=x,y=value,color=variable,linetype=variable))+geom_line()+
facet_wrap(~var)+xlab("Time")+ylab("Sensitivity")+ggtitle("Sentitiviy to parameters ") + theme_bw()
ident <- collin(Sfun)
ident
plot(ident, log = "y")
View(ident)

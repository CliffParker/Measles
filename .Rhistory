}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
#A subset of the Dataset can be seen from the Data below, with time,
#Culmulative Incidence, Culmulative Birth and Culmulative Error.
Fdat = Biweekly(NewData)
sigmaU = 1
set.seed(143)
U = rnorm(226,0,sd=sigmaU)
Fdat.d = cbind(Fdat[-(227:234),1],Fdat[-(1:8),2],U) # Adjusting for the  delay caused by maternal immunity
Fdat1 = Cumulative(Fdat.d) # Cumulated table
NewData1 = cbind(Time=time,CIncidence=Fdat1[,1],CBirths=Fdat1[,2], U=Fdat1[,3])
NewData2 = as.data.frame(NewData1 )
head(NewData2)
###############################################################################################
##########################    DATA      CREATED    ############################################
###############################################################################################
###############################################################################################
##########################    MODEL     FITTING    ############################################
###############################################################################################
fit <- lm(CBirths ~ CIncidence, data=NewData2)
summary(fit) # show results
plot(predict(fit)~CIncidence, data = NewData2)
confint(fit, level=0.95) # CIs for model parameters
anova(fit) # anova table
# covariance matrix for model parameters
#Below are plots of the estimated residuals both with noice and without noise.
Resid.noisefree=as.vector(residuals(fit))# residuals
plot(Resid.noisefree~time, type="o", col="blue")
Resid.noise=as.vector(residuals(fit)) + NewData2$U # residuals with noise
plot(Resid.noise~time, type="o", col="blue")
fit.loess <- loess(CBirths ~ CIncidence, data=NewData2, degree = 1, span = 1.49992)
summary(fit.loess) # show results
Resid.loess=as.vector(fit.loess$residuals)+ NewData2$U# residuals
plot(Resid.loess~time, type="o", col="blue")
fit.loess$kd
require(locpol)# Package for estimating the parameters of local regression.
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
plot(d$X,d$Y)
lpest2 <- locpol(d$Y ~d$X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
sd = sqrt(var(d$X))
lpest2 <- locpol(d$Y ~d$X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
lpest2$lpFit
lpest2$residuals
source('~/GitHub/Measles/locpol.R')
mylr = lr(d,.3)
mylr
lpest2$lpFit
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
lpest2$lpFit
lpest2$residuals
lpest2$CIwidth
lpest1 <- locPolSmootherC(d$X,d$Y , xeval, bw = .3 * sd , deg = 1, gaussK)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = .3 * sd , deg = 1, gaussK)
lpest1
lpest2$lpFit
fitted(fit)
fitted.values(fit)
fitted.values(lpest2)
mylr
mylr
my = data.frame(lpest2$lpFit[,1:2], lpest1$beta0, lpest2$lpFit$Y1,
fitted.values(lpest2),lpest2$residuals)
my
my = data.frame(lpest2$lpFit[,1:2], b0=lpest1$beta0, b1=lpest2$lpFit$Y1,
fit=fitted.values(lpest2), resd=lpest2$residuals)
my
Data = data.frame( Fdat.d[,-3], mylr )
Data[,9] = Data[,1] * Data[,6] #Creating I(t)
Data[,10] = c( NA, Data[,8])[1:226]
Data[,11] = c( NA, Data[,9])[1:226]
# My script
###############################################################################################
##########################    DATA      CREATION    ###########################################
###############################################################################################
t = seq(0,9, by = 9/(468))[1:(468)]
IData = read.table(file.choose())
IData = IData[2:469,2]
BData = read.table(file.choose())
BData = (BData[,2])/13 #Data is recorded quaterly, thus the resulting data is weekly
BData = rep(BData, each = 13)
plot(t,BData, type="l", col="blue")
plot(t,IData, type="l", col="red")
time = seq(0,9, by = 9/(226))[1:(226)]
#Bi-weekly dataset
NewData = cbind(IData,BData)
Biweekly=function(Data){
n=nrow(Data)/2
m=ncol(Data)
mat = matrix( ,n,m)
for (i in 0:n - 1 ){
mat[i + 1,]= rep(0, m)
for (j in 1:2) {
x = (2*i)+j
mat[i+1,] = c(mat[i+1,]) + c(Data[x,])
}
}
return(mat)
}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
#A subset of the Dataset can be seen from the Data below, with time,
#Culmulative Incidence, Culmulative Birth and Culmulative Error.
Fdat = Biweekly(NewData)
sigmaU = 1
set.seed(143)
U = rnorm(226,0,sd=sigmaU)
Fdat.d = cbind(Fdat[-(227:234),1],Fdat[-(1:8),2],U) # Adjusting for the  delay caused by maternal immunity
Fdat1 = Cumulative(Fdat.d) # Cumulated table
NewData1 = cbind(Time=time,CIncidence=Fdat1[,1],CBirths=Fdat1[,2], U=Fdat1[,3])
NewData2 = as.data.frame(NewData1 )
head(NewData2)
###############################################################################################
##########################    DATA      CREATED    ############################################
###############################################################################################
###############################################################################################
##########################    MODEL     FITTING    ############################################
###############################################################################################
fit <- lm(CBirths ~ CIncidence, data=NewData2)
summary(fit) # show results
plot(predict(fit)~CIncidence, data = NewData2)
confint(fit, level=0.95) # CIs for model parameters
anova(fit) # anova table
# covariance matrix for model parameters
#Below are plots of the estimated residuals both with noice and without noise.
Resid.noisefree=as.vector(residuals(fit))# residuals
plot(Resid.noisefree~time, type="o", col="blue")
Resid.noise=as.vector(residuals(fit)) + NewData2$U # residuals with noise
plot(Resid.noise~time, type="o", col="blue")
fit.loess <- loess(CBirths ~ CIncidence, data=NewData2, degree = 1, span = 1.49992)
summary(fit.loess) # show results
Resid.loess=as.vector(fit.loess$residuals)+ NewData2$U# residuals
plot(Resid.loess~time, type="o", col="blue")
fit.loess$kd
require(locpol)# Package for estimating the parameters of local regression.
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
plot(d$X,d$Y)
sd = sqrt(var(d$X))
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = .3 * sd , deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
lpest2$lpFit
lpest2$residuals
#My codes for Local regression analysis
#######################################
source('~/GitHub/Measles/locpol.R')
mylr = lr(d,.3)
plot(mylr$resd)
#######################################
mydat = data.frame(lpest2$lpFit[,1:2], b0=lpest1$beta0, b1=lpest2$lpFit$Y1,
fit=fitted.values(lpest2), resd=lpest2$residuals)
#Data needed is in Fdat.d and mylr
Data = data.frame( Fdat.d[,-3], mydat )
Data[,9] = Data[,1] * Data[,6] #Creating I(t)
Data[,10] = c( NA, Data[,8])[1:226] #Creating Z(t-1)
Data[,11] = c( NA, Data[,9])[1:226] #Creating I(t-1)
colnames(Data)[c(1:2,8,9,10,11)] = c("C","B","Z","I","Zt-1","It-1")
source('~/GitHub/Measles/TSIR parameter estimation.R', echo=F)
Fitit(10)
Fitit(10)
Data = data.frame( Fdat.d[,-3], mylr )
Data[,9] = Data[,1] * Data[,6] #Creating I(t)
Data[,10] = c( NA, Data[,8])[1:226] #Creating Z(t-1)
Data[,11] = c( NA, Data[,9])[1:226] #Creating I(t-1)
colnames(Data)[c(1:2,8,9,10,11)] = c("C","B","Z","I","Zt-1","It-1")
source('~/GitHub/Measles/TSIR parameter estimation.R', echo=F)
Fitit(10)
z = Fitit(10)
log(z$xval)
exp(.3)
exp(.4)
# My script
###############################################################################################
##########################    DATA      CREATION    ###########################################
###############################################################################################
t = seq(0,9, by = 9/(468))[1:(468)]
IData = read.table(file.choose())
IData = IData[2:469,2]
BData = read.table(file.choose())
BData = (BData[,2])/13 #Data is recorded quaterly, thus the resulting data is weekly
BData = rep(BData, each = 13)
plot(t,BData, type="l", col="blue")
plot(t,IData, type="l", col="red")
time = seq(0,9, by = 9/(226))[1:(226)]
#Bi-weekly dataset
NewData = cbind(IData,BData)
Biweekly=function(Data){
n=nrow(Data)/2
m=ncol(Data)
mat = matrix( ,n,m)
for (i in 0:n - 1 ){
mat[i + 1,]= rep(0, m)
for (j in 1:2) {
x = (2*i)+j
mat[i+1,] = c(mat[i+1,]) + c(Data[x,])
}
}
return(mat)
}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
#A subset of the Dataset can be seen from the Data below, with time,
#Culmulative Incidence, Culmulative Birth and Culmulative Error.
Fdat = Biweekly(NewData)
sigmaU = 1
set.seed(143)
U = rnorm(226,0,sd=sigmaU)
Fdat.d = cbind(Fdat[-(227:234),1],Fdat[-(1:8),2],U) # Adjusting for the  delay caused by maternal immunity
Fdat1 = Cumulative(Fdat.d) # Cumulated table
NewData1 = cbind(Time=time,CIncidence=Fdat1[,1],CBirths=Fdat1[,2], U=Fdat1[,3])
NewData2 = as.data.frame(NewData1 )
head(NewData2)
###############################################################################################
##########################    DATA      CREATED    ############################################
###############################################################################################
###############################################################################################
##########################    MODEL     FITTING    ############################################
###############################################################################################
fit <- lm(CBirths ~ CIncidence, data=NewData2)
summary(fit) # show results
plot(predict(fit)~CIncidence, data = NewData2)
confint(fit, level=0.95) # CIs for model parameters
anova(fit) # anova table
# covariance matrix for model parameters
#Below are plots of the estimated residuals both with noice and without noise.
Resid.noisefree=as.vector(residuals(fit))# residuals
plot(Resid.noisefree~time, type="o", col="blue")
Resid.noise=as.vector(residuals(fit)) + NewData2$U # residuals with noise
plot(Resid.noise~time, type="o", col="blue")
fit.loess <- loess(CBirths ~ CIncidence, data=NewData2, degree = 1, span = 1.49992)
summary(fit.loess) # show results
Resid.loess=as.vector(fit.loess$residuals)+ NewData2$U# residuals
plot(Resid.loess~time, type="o", col="blue")
fit.loess$kd
require(locpol)# Package for estimating the parameters of local regression.
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
plot(d$X,d$Y)
sd = sqrt(var(d$X))
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = .3 * sd , deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
lpest2$lpFit
lpest2$residuals
#My codes for Local regression analysis
#######################################
source('~/GitHub/Measles/locpol.R')
mylr = lr(d,.3)
plot(mylr$resd)
#######################################
mydat = data.frame(lpest2$lpFit[,1:2], b0=lpest1$beta0, b1=lpest2$lpFit$Y1,
fit=fitted.values(lpest2), resd=lpest2$residuals)
#Data needed is in Fdat.d and mylr
Data = data.frame( Fdat.d[,-3], mydat )
Data[,9] = Data[,1] * Data[,6] #Creating I(t)
Data[,10] = c( NA, Data[,8])[1:226] #Creating Z(t-1)
Data[,11] = c( NA, Data[,9])[1:226] #Creating I(t-1)
colnames(Data)[c(1:2,8,9,10,11)] = c("C","B","Z","I","Zt-1","It-1")
source('~/GitHub/Measles/TSIR parameter estimation.R', echo=F)
Fitit(10)
View(Data)
log(Fitit(10)$xval)
source('~/GitHub/Measles/TSIR parameter estimation.R', echo=F)
Fitit(10)
log(Fitit(10)$xval)
Non = data.frame(rep(1,10),1:10)
View(Non)
Biweekly=function(Data){
n=nrow(Data)/2
m=ncol(Data)
mat = matrix( ,n,m)
for (i in 0:n - 1 ){
mat[i + 1,]= rep(0, m)
for (j in 1:2) {
x = (2*i)+j
mat[i+1,] = c(mat[i+1,]) + c(Data[x,])
}
}
return(mat)
}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
Biweekly(Non)
Non = as.matrix(Non)
View(Non)
Biweekly(Non)
Cumulative(Non)
Cumulative(Biweekly(Non))
SSE1 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
return(ESS)
}
SSE1(.h)
###############################################################################################
##########################    DATA      CREATION    ###########################################
###############################################################################################
t = seq(0,9, by = 9/(468))[1:(468)]
IData = read.table(file.choose())
IData = IData[2:469,2]
BData = read.table(file.choose())
BData = (BData[,2])/13 #Data is recorded quaterly, thus the resulting data is weekly
BData = rep(BData, each = 13)
plot(t,BData, type="l", col="blue")
plot(t,IData, type="l", col="red")
time = seq(0,9, by = 9/(226))[1:(226)]
#Bi-weekly dataset
NewData = cbind(IData,BData)
Biweekly=function(Data){
n=nrow(Data)/2
m=ncol(Data)
mat = matrix( ,n,m)
for (i in 0:n - 1 ){
mat[i + 1,]= rep(0, m)
for (j in 1:2) {
x = (2*i)+j
mat[i+1,] = c(mat[i+1,]) + c(Data[x,])
}
}
return(mat)
}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
#A subset of the Dataset can be seen from the Data below, with time,
#Culmulative Incidence, Culmulative Birth and Culmulative Error.
Fdat = Biweekly(NewData)# Biweekly data
sigmaU = 1
set.seed(143)
U = rnorm(226,0,sd=sigmaU)
Fdat.d = cbind(Fdat[-(227:234),1],Fdat[-(1:8),2],U) # Adjusting for the  delay caused by maternal immunity
# U added was for error, can be ignored
Fdat1 = Cumulative(Fdat.d) # Cumulated table
NewData1 = cbind(Time=time,CIncidence=Fdat1[,1],CBirths=Fdat1[,2], U=Fdat1[,3])
NewData2 = as.data.frame(NewData1 )
head(NewData2)
#err
SSE1(.3)
require(locpol)
SSE1(.3)
ESS1 = sum(error^2)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(ESS)
}
SSE2(.3)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS,ESS1)/e+12)
}
SSE2(.3)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS,ESS1)/1e+12)
}
SSE2(.3)
plot(seq(.1,5,.01),SSE1(seq(.1,5,.01)))
x = seq(.1,5,.01)
plot(x)
length(x)
y = SSE1(x)
y
y = sapply(x,SSE1)
y
plot(y~x)
SSE1 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = h * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
return(ESS)
}
y = sapply(x,SSE1)
plot(y~x)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = h * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS,ESS1)/1e+12)
}
y = sapply(x,SSE2)
plot(y~x)
plot(y[,1]~x)
dim(y)
length(x)
plot(y[,1] ~ x)
yy[,1]
yy=y[,1]
yyy=y[,2]
plot(yy~x)
length(yy)
plot(y[1,] ~ x)
plot(y[2,] ~ x)
y[2,]
x = seq(.1,10,.01)
y = sapply(x,SSE2)
y[2,]
plot(y[2,] ~ x)
plot(y[1,] ~ x)
x = seq(.1,.4,.01)
y = sapply(x,SSE2)
plot(y[1,] ~ x)
plot(y[2,] ~ x)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = h * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS/1e+12,ESS1/1e+15))
}
y = sapply(x,SSE2)
plot(y[2,] ~ x)
plot(y[1,] ~ x)
plot(y[1,] ~ x, type = "l", col = "red")
line(y[2,] ~ x, col = "green")
line(y[2,] ~ x)
line(x,y[2,], col = "green")
lines(y[2,] ~ x, col = "green")
plot(y[2,] ~ x, type = "l", col = "red", xlabel = "h", ylabel = "SSE")
plot(y[2,] ~ x, type = "l", col = "red", xlab = "h", ylab = "SSE")
lines(y[1,] ~ x, col = "green")
plot(y[2,] ~ x, type = "l", col = "red", xlab = "h", ylab = "SSE", xlim= c(0,15))
plot(y[2,] ~ x, type = "l", col = "red", xlab = "h", ylab = "SSE", ylim= c(0,15))
lines(y[1,] ~ x, col = "green")
lines(y[1,] ~ x, col = "blue")

#My codes for Local regression analysis
#######################################
source('~/GitHub/Measles/locpol.R')
mylr = lr(d,.3)
plot(mylr$resd)
#######################################
mydat = data.frame(lpest2$lpFit[,1:2], b0=lpest1$beta0, b1=lpest2$lpFit$Y1,
fit=fitted.values(lpest2), resd=lpest2$residuals)
#Data needed is in Fdat.d and mylr
Data = data.frame( Fdat.d[,-3], mydat )
Data[,9] = Data[,1] * Data[,6] #Creating I(t)
Data[,10] = c( NA, Data[,8])[1:226] #Creating Z(t-1)
Data[,11] = c( NA, Data[,9])[1:226] #Creating I(t-1)
colnames(Data)[c(1:2,8,9,10,11)] = c("C","B","Z","I","Zt-1","It-1")
source('~/GitHub/Measles/TSIR parameter estimation.R', echo=F)
Fitit(10)
View(Data)
log(Fitit(10)$xval)
source('~/GitHub/Measles/TSIR parameter estimation.R', echo=F)
Fitit(10)
log(Fitit(10)$xval)
Non = data.frame(rep(1,10),1:10)
View(Non)
Biweekly=function(Data){
n=nrow(Data)/2
m=ncol(Data)
mat = matrix( ,n,m)
for (i in 0:n - 1 ){
mat[i + 1,]= rep(0, m)
for (j in 1:2) {
x = (2*i)+j
mat[i+1,] = c(mat[i+1,]) + c(Data[x,])
}
}
return(mat)
}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
Biweekly(Non)
Non = as.matrix(Non)
View(Non)
Biweekly(Non)
Cumulative(Non)
Cumulative(Biweekly(Non))
SSE1 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
return(ESS)
}
SSE1(.h)
###############################################################################################
##########################    DATA      CREATION    ###########################################
###############################################################################################
t = seq(0,9, by = 9/(468))[1:(468)]
IData = read.table(file.choose())
IData = IData[2:469,2]
BData = read.table(file.choose())
BData = (BData[,2])/13 #Data is recorded quaterly, thus the resulting data is weekly
BData = rep(BData, each = 13)
plot(t,BData, type="l", col="blue")
plot(t,IData, type="l", col="red")
time = seq(0,9, by = 9/(226))[1:(226)]
#Bi-weekly dataset
NewData = cbind(IData,BData)
Biweekly=function(Data){
n=nrow(Data)/2
m=ncol(Data)
mat = matrix( ,n,m)
for (i in 0:n - 1 ){
mat[i + 1,]= rep(0, m)
for (j in 1:2) {
x = (2*i)+j
mat[i+1,] = c(mat[i+1,]) + c(Data[x,])
}
}
return(mat)
}
Cumulative = function(Data){
n=nrow(Data)
m=ncol(Data)
Dta=matrix( ,n,m)
Dta[1,] = Data[1,]
for (i in 2:n){
Dta[i,] = Dta[i-1,] + Data[i,]
}
return(Dta)
}
#A subset of the Dataset can be seen from the Data below, with time,
#Culmulative Incidence, Culmulative Birth and Culmulative Error.
Fdat = Biweekly(NewData)# Biweekly data
sigmaU = 1
set.seed(143)
U = rnorm(226,0,sd=sigmaU)
Fdat.d = cbind(Fdat[-(227:234),1],Fdat[-(1:8),2],U) # Adjusting for the  delay caused by maternal immunity
# U added was for error, can be ignored
Fdat1 = Cumulative(Fdat.d) # Cumulated table
NewData1 = cbind(Time=time,CIncidence=Fdat1[,1],CBirths=Fdat1[,2], U=Fdat1[,3])
NewData2 = as.data.frame(NewData1 )
head(NewData2)
#err
SSE1(.3)
require(locpol)
SSE1(.3)
ESS1 = sum(error^2)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(ESS)
}
SSE2(.3)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS,ESS1)/e+12)
}
SSE2(.3)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = .3 * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS,ESS1)/1e+12)
}
SSE2(.3)
plot(seq(.1,5,.01),SSE1(seq(.1,5,.01)))
x = seq(.1,5,.01)
plot(x)
length(x)
y = SSE1(x)
y
y = sapply(x,SSE1)
y
plot(y~x)
SSE1 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = h * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
return(ESS)
}
y = sapply(x,SSE1)
plot(y~x)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = h * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS,ESS1)/1e+12)
}
y = sapply(x,SSE2)
plot(y~x)
plot(y[,1]~x)
dim(y)
length(x)
plot(y[,1] ~ x)
yy[,1]
yy=y[,1]
yyy=y[,2]
plot(yy~x)
length(yy)
plot(y[1,] ~ x)
plot(y[2,] ~ x)
y[2,]
x = seq(.1,10,.01)
y = sapply(x,SSE2)
y[2,]
plot(y[2,] ~ x)
plot(y[1,] ~ x)
x = seq(.1,.4,.01)
y = sapply(x,SSE2)
plot(y[1,] ~ x)
plot(y[2,] ~ x)
SSE2 = function(h){
ESS = 0
d <- data.frame(X = NewData2$CIncidence)
d$Y <- NewData2$CBirths
sd = sqrt(var(d$X))
fit <- lm(CBirths ~ CIncidence, data=NewData2)
lpest1 <- locPolSmootherC(d$X,d$Y , d$X, bw = h * sd, deg = 1, gaussK)
lpest2 <- locpol(Y ~ X, data = d, bw = h * sd , kernel = gaussK, deg = 1, xeval = d$X)
ESS = sum(lpest2$residuals^2)
error = fitted.values(fit) - ( lpest1$beta0 + lpest2$lpFit$Y1 * lpest2$lpFit[,1])
ESS1 = sum(error^2)
return(c(ESS/1e+12,ESS1/1e+15))
}
y = sapply(x,SSE2)
plot(y[2,] ~ x)
plot(y[1,] ~ x)
plot(y[1,] ~ x, type = "l", col = "red")
line(y[2,] ~ x, col = "green")
line(y[2,] ~ x)
line(x,y[2,], col = "green")
lines(y[2,] ~ x, col = "green")
plot(y[2,] ~ x, type = "l", col = "red", xlabel = "h", ylabel = "SSE")
plot(y[2,] ~ x, type = "l", col = "red", xlab = "h", ylab = "SSE")
lines(y[1,] ~ x, col = "green")
plot(y[2,] ~ x, type = "l", col = "red", xlab = "h", ylab = "SSE", xlim= c(0,15))
plot(y[2,] ~ x, type = "l", col = "red", xlab = "h", ylab = "SSE", ylim= c(0,15))
lines(y[1,] ~ x, col = "green")
lines(y[1,] ~ x, col = "blue")
library(deSolve)
require(pracma)
require(FME)
require(stats4)
require(bbmle)
Data = read.table(file.choose())
summary(Data)
head(Data)
Data = Data[1:469,2]
report=function(out, gamma = gamma){
I= out[,4]
C=c()
for (i in 0:(468+1456) ){
C[i+1]=0
for (j in 1:7) {
x=(7*i)+j
C[i+1]=C[i+1] + gamma*I[x]*(1/(365.25*7))
}
}
return(C)
}
"MODEL"
pars <- c(mub=14942, beta= 400, mu = 0.00029868, lambda = 3, gamma = 365/14
, va = 0, s = 50022238, e = 0, i = 3762, r = 0 )
s = 50022238
e = 0
i = 3762
r = 0
n = 50026000
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
o=37/((469+1456)*7)  # A day in 37 years
times <- seq(0, 37, by = o)
times <- times[1:((469+1456)*7)] # 37 years in days  (length = 13475)
outt<- ode(y = state, times = times, func = sir_rhs, parms = pars)
report(outt,1)
report(outt,27)
x=report(outt,27)
x=report(outt,1)
x=report(outt,27)
y=report(outt,1)
summary(x)
summary(y)
xx=report(2*outt,27)
yy=report(2*outt,1)
summary(xx)
summary(yy)
least_squares=function(parameter, data){
pars <- as.vector(parameter)
mub=pars[1]
beta=pars[2]
mu = pars[3]
lambda = pars[4]
gamma = pars[5]
va =pars[6]
s = pars[7]
e = pars[8]
i = pars[9]
r = pars[10]
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
#Model representation
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
OUT<- report(out,gamma)
OUT = OUT[-(1:1456)]
data = Data
ESS = 0
error = data - OUT #assuming out[,2] is for incidence
ESS = sum(error^2)
return(ESS)
}
pars <- c(mub=14942, beta= 400, mu = 0.00029868, lambda = 3, gamma = 365/14
, va = 0, s = 50022238, e = 0, i = 3762, r = 0 )
least_squares(pars,Data)
least_squares(2*pars,Data)
parameter=pars
data = Data
pars <- as.vector(parameter)
mub=pars[1]
beta=pars[2]
mu = pars[3]
lambda = pars[4]
gamma = pars[5]
va =pars[6]
s = pars[7]
e = pars[8]
i = pars[9]
r = pars[10]
n = s+e+i+r
least_squares(rep(1,10),Data)
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
o=37/((469+1456)*7)  # A day in 37 years
times <- seq(0, 37, by = o)
times <- times[1:((469+1456)*7)] # 37 years in days  (length = 13475)
outt<- ode(y = state, times = times, func = sir_rhs, parms = pars)
parameter=pars
data = Data
pars <- as.vector(parameter)
mub=pars[1]
beta=pars[2]
mu = pars[3]
lambda = pars[4]
gamma = pars[5]
va =pars[6]
s = pars[7]
e = pars[8]
i = pars[9]
r = pars[10]
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
summary(out)
OUT<- report(out,gamma)
summary(OUT)
gamma
View(OUT)
tail(OUT)
tail(OUT,469)
OUT = OUT[-(1:1456)]
data = Data
ESS = 0
error = data - OUT #assuming out[,2] is for incidence
ESS = sum(error^2)
ESS
summary(OUT)
error
Data
n
OUT<- report(out,gamma)
plot(OUT)
pars <- c(mub=14942, beta= 400, mu = 0.00029868, lambda = 3, gamma = 200
, va = 0, s = 50022238, e = 0, i = 3762, r = 0 )
least_squares(pars,Data)
pars <- c(mub=14942, beta= 40, mu = 0.00029868, lambda = 3, gamma = 365/14
, va = 0, s = 50022238, e = 0, i = 3762, r = 0 )
least_squares(pars,Data)
pars <- c(mub=14942, beta= 4, mu = 0.00029868, lambda = 3, gamma = 365/14
, va = 0, s = 50022238, e = 0, i = 3762, r = 0 )
pars <- c(mub=14942, beta= 4, mu = 0.00029868, lambda = 3, gamma = 365/14
, va = 0, s = 50022238, e = 0, i = 3762, r = 0 )
least_squares(pars,Data)
mub=pars[1]
beta=pars[2]
mu = pars[3]
lambda = pars[4]
gamma = pars[5]
va =pars[6]
s = pars[7]
e = pars[8]
i = pars[9]
r = pars[10]
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
mub=pars[1]
beta=pars[2]
mu = pars[3]
lambda = pars[4]
gamma = pars[5]
va =pars[6]
s = pars[7]
e = pars[8]
i = pars[9]
r = pars[10]
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
data
parameter = pars
pars <- as.vector(parameter)
mub=pars[1]
beta=pars[2]
mu = pars[3]
lambda = pars[4]
gamma = pars[5]
va =pars[6]
s = pars[7]
e = pars[8]
i = pars[9]
r = pars[10]
n = s+e+i+r
state <- c(S = s , E = e , I = i, R = r, N = n)
sir_rhs=function(t,state,pars){
with(as.list(c(state, pars)),{
#rates of change
dS <- pars[1]*(1-pars[6])-pars[2]*S*I/N - pars[3]*S
dE <- pars[2]*S*I/N - (pars[4]+pars[3])*E
dI <- pars[4]*E - (pars[5]+pars[3])*I
dR <- pars[5]*I + pars[1]*pars[6] - pars[3]*R
dN <- pars[1] - pars[3]*N
# return the rate of change
list(c(dS, dE, dI, dR, dN))
})
}
out <- ode(y = state, times = times, func = sir_rhs, parms = pars)
OUT<- report(out,gamma)
plot(OUT)
